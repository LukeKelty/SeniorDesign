#!/usr/bin/python
import cv2
import numpy as np
import face_recognition
import os
from datetime import datetime
from tkinter import *
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk


def scanface():
    path = 'ImagesAttendance'
    images = []
    staffNames = []
    myList = os.listdir(path)
    print(myList)
    for st in myList:
        curImg = cv2.imread(f'{path}/{st}')
        images.append(curImg)
        staffNames.append(os.path.splitext(st)[0])
    print(staffNames)

    def findEncodings(images):
        encodeList = []
        for img in images:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            # finding encodings
            encode = face_recognition.face_encodings(img)[0]
            encodeList.append(encode)
        return encodeList

    def createAttendance(name):
        # datetime library usage
        with open('Attendance.csv', 'r+') as f:
            myDataList = f.readlines()
            nameList = []
            for line in myDataList:
                entry = line.split(',')
                nameList.append(entry[0])
            if name not in nameList:
                now = datetime.now()
                dateString = now.strftime('%H:%M:%S')
                f.writelines(f'\n{name},{dateString}')

    encodeListKnown = findEncodings(images)
    print('Encoding Complete')

    cap = cv2.VideoCapture(0)

    while True:
        success, img = cap.read()
        # because its real time capture, we wld reduce the size of image to speed up the process
        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)

        # realtime image size has been divided by 4 using 0.25
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

        facesCurFrame = face_recognition.face_locations(imgS)
        encodeCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)
        # finding matches
        for encodeFace, faceLoc in zip(encodeCurFrame, facesCurFrame):
            matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
            faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
            print(faceDis)

            matchIndex = np.argmin(faceDis)
            print('matchIndex', matchIndex)

            if matches[matchIndex]:
                name = staffNames[matchIndex].upper()
                print(name)
                y1, x2, y2, x1 = faceLoc
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                # ^ rezise of small images for box dimensions
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 0, 0), cv2.FILLED)
                cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)
                cv2.imshow('Webcam', img)
                createAttendance(name)

            else:
                print("No Face Recognized")

        # press'esc' to close program
        cv2.imshow('Webcam', img)
        cv2.waitKey(1)
    # release camera
    cap.release()
    cv2.destroyAllWindows()
    
scanner = Tk()
scanner.title('Face Scanner System')
scanner.geometry('700x700')
scanner['bg'] = '#5F9EF0'



b1 = Button(scanner, text='Scan a face', activebackground='#5F0AFF', padx=20, pady=3, bd='7', command = scanface)
b1.pack(padx=10, pady=25)

b2 = Button(scanner, text='Exit', bd='7', padx=20, pady=3, command=scanner.destroy)
b2.pack()


im=Image.open("C:/PycharmProjects/homework/face.jpg")  #This is the correct location and spelling for my image location
photo=ImageTk.PhotoImage(im)
cv = tk.Canvas()
cv.pack(side='top', fill='both', expand='yes')
cv.create_image(10, 10, image=photo, anchor='nw')
# message_box = Message(screen,text)

scanner.mainloop()
